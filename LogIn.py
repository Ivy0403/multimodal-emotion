# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LogIn.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import background
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMessageBox
from PyQt5.QtGui import QPainter, QPixmap
import config
import background


class LogInPage(QWidget):
        def __init__(self, switch_page, db_manager):
                super().__init__()
                self.ui = Ui_LogIn()
                self.ui.setupUi(self)
                self.switch_page = switch_page
                self.db_manager = db_manager
                # 连接按钮的点击信号到相应的槽函数
                self.ui.LogInButton.clicked.connect(self.handle_login)
                self.admin_accounts = [
                        {'username': '33', 'password': '33'},
                        {'username': 'admin', 'password': 'admin'},

                ]

        def showEvent(self, event):
                super().showEvent(event)
                # 清空输入框
                self.ui.ExitButton.clicked.connect(lambda: self.switch_page("register"))
                self.ui.NameInput.clear()
                self.ui.KeyInput.clear()

        def handle_login(self):
                username = self.ui.NameInput.text()
                password = self.ui.KeyInput.text()
                global currentUserType
                for admin in self.admin_accounts:
                        if username == admin['username'] and password == admin['password']:
                                QMessageBox.information(self, "Success", "Administrator login successful!")
                                config.currentUserType = 1  # 管理员登录
                                config.currentUserName = username
                                print("current_username is", config.currentUserName)
                                print("currnet type is", config.currentUserType)
                                self.switch_page('adminmenu')  # 假设管理员登录成功后需要跳转到特定的页面
                                return

                results = self.db_manager.query_data('user_info', 'user_name', username)

                if results and len(results) > 0:
                        # 假设密码字段在数据库中的列名为 'password'
                        db_password = results[0]['user_password']  # 获取数据库中存储的密码
                        if password == db_password:
                                config.currentUserType = 0  # 普通用户登录
                                config.currentUserName = results[0]['user_name']
                                print("current_username is", config.currentUserName)
                                print("currnet type is", config.currentUserType)
                                QMessageBox.information(self, "Success", "Login successful!")
                                self.switch_page('emotion_monitoring')  # 假设登录成功后需要跳转到menu
                        else:
                                QMessageBox.warning(self, "Failed", "Incorrect username or password.")
                else:
                        QMessageBox.warning(self, "Failed", "Incorrect username or password.")


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_LogIn(object):
    def setupUi(self, LogIn):
        LogIn.setObjectName("LogIn")
        LogIn.resize(1440, 709)
        LogIn.setStyleSheet("#LogIn{\n"
"background-image: url(:/background/background.png);\n"
"}\n"
"    \n"
"\n"
"")
        self.label = QtWidgets.QLabel(LogIn)
        self.label.setGeometry(QtCore.QRect(620, 140, 660, 80))
        palette = QtGui.QPalette()
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.frame = QtWidgets.QFrame(LogIn)
        self.frame.setGeometry(QtCore.QRect(705, 280, 490, 271))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.NameInput = QtWidgets.QLineEdit(self.frame)
        self.NameInput.setGeometry(QtCore.QRect(90, 40, 301, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.NameInput.setFont(font)
        self.NameInput.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.NameInput.setStyleSheet("QLineEdit {\n"
"    background-image: url(:/user/user.png);\n"
"    background-repeat: no-repeat;\n"
"    background-position: left center;\n"
"    padding-left: 30px; \n"
"}\n"
"")
        self.NameInput.setText("")
        self.NameInput.setCursorPosition(0)
        self.NameInput.setPlaceholderText("")
        self.NameInput.setObjectName("NameInput")
        self.LogInButton = QtWidgets.QPushButton(self.frame)
        self.LogInButton.setGeometry(QtCore.QRect(90, 160, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        self.LogInButton.setFont(font)
        self.LogInButton.setStyleSheet("border:2px groove gray;\n"
"background-color: rgb(93, 200, 248);\n"
"border-radius:10px;padding:2px 4px;\n"
"")
        self.LogInButton.setObjectName("LogInButton")
        self.ExitButton = QtWidgets.QPushButton(self.frame)
        self.ExitButton.setGeometry(QtCore.QRect(90, 220, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(15)
        self.ExitButton.setFont(font)
        self.ExitButton.setStyleSheet("border:2px groove gray;\n"
"background-color: rgb(93, 200, 248);\n"
"border-radius:10px;padding:2px 4px;\n"
"")
        self.ExitButton.setObjectName("ExitButton")
        self.KeyInput = QtWidgets.QLineEdit(self.frame)
        self.KeyInput.setGeometry(QtCore.QRect(90, 100, 301, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setKerning(True)
        self.KeyInput.setFont(font)
        self.KeyInput.setStyleSheet("QLineEdit {\n"
"    background-image: url(:/password/padlock.png);\n"
"    background-repeat: no-repeat;\n"
"    background-position: left center;\n"
"    padding-left: 30px; \n"
"}\n"
"")
        self.KeyInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.KeyInput.setObjectName("KeyInput")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(90, 10, 301, 19))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_2.setObjectName("label_2")

        self.retranslateUi(LogIn)
        QtCore.QMetaObject.connectSlotsByName(LogIn)

    def retranslateUi(self, LogIn):
        _translate = QtCore.QCoreApplication.translate
        LogIn.setWindowTitle(_translate("LogIn", "Dialog"))
        self.label.setText(_translate("LogIn", "Welcome"))
        self.LogInButton.setText(_translate("LogIn", "LogIn"))
        self.ExitButton.setText(_translate("LogIn", "Register"))
        self.label_2.setText(_translate("LogIn", "Account%Password"))


import sys
from PyQt5.QtWidgets import QApplication

if __name__ == '__main__':
        app = QApplication(sys.argv)


        # 模拟 switch_page 和 db_manager（因为 LogInPage 需要这两个参数）
        def dummy_switch_page(page_name):
                print(f"切换到页面: {page_name}")


        class DummyDbManager:
                def query_data(self, table, field, value):
                        # 返回模拟的查询结果（普通用户测试用）
                        if value == "testuser":
                                return [{"user_name": "testuser", "user_password": "123456"}]
                        return []


        # 创建登录页面
        login_page = LogInPage(dummy_switch_page, DummyDbManager())
        login_page.show()

        sys.exit(app.exec_())